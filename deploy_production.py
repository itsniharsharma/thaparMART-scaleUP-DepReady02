#!/usr/bin/env python3
"""
Thapar Marketplace - Production Deployment Script
Run with: python deploy_production.py
"""

import os
import sys
import subprocess
import time
import json
import getpass
from pathlib import Path

class ProductionDeployment:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.compose_file = self.project_root / "docker-compose.prod.yml"
        self.env_file = self.project_root / ".env.production"
        
    def print_banner(self):
        print("=" * 60)
        print("üè≠ THAPAR MARKETPLACE - PRODUCTION DEPLOYMENT")
        print("=" * 60)
        
    def check_prerequisites(self):
        print("\nüîç Checking prerequisites...")
        
        # Check if Docker is installed
        try:
            result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker found: {result.stdout.strip()}")
            else:
                raise Exception("Docker not found")
        except Exception:
            print("‚ùå Docker is not installed or not running!")
            sys.exit(1)
            
        # Check if Docker Compose is available
        try:
            result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Docker Compose found: {result.stdout.strip()}")
            else:
                # Try docker compose (newer version)
                result = subprocess.run(['docker', 'compose', '--version'], capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"‚úÖ Docker Compose found: {result.stdout.strip()}")
                else:
                    raise Exception("Docker Compose not found")
        except Exception:
            print("‚ùå Docker Compose is not available!")
            sys.exit(1)
            
        # Check if Docker daemon is running
        try:
            result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Docker daemon is running")
            else:
                raise Exception("Docker daemon not running")
        except Exception:
            print("‚ùå Docker daemon is not running!")
            sys.exit(1)
            
    def collect_production_config(self):
        print("\nüìù Production Configuration Setup")
        print("Please provide your production configuration:")
        print("(Press Enter to use default values shown in brackets)")
        
        config = {}
        
        # MongoDB Configuration
        print("\nüóÑÔ∏è  DATABASE CONFIGURATION:")
        config['MONGO_PASSWORD'] = getpass.getpass("MongoDB Password (secure password): ") or "thaparmart_prod_2024"
        
        # Domain Configuration
        print("\nüåê DOMAIN CONFIGURATION:")
        config['FRONTEND_URL'] = input("Frontend URL [https://your-domain.com]: ") or "https://your-domain.com"
        config['BACKEND_URL'] = input("Backend URL [https://api.your-domain.com]: ") or "https://api.your-domain.com"
        
        # AWS S3 Configuration
        print("\n‚òÅÔ∏è  AWS S3 CONFIGURATION:")
        config['AWS_ACCESS_KEY_ID'] = input("AWS Access Key ID: ") or "your_aws_access_key"
        config['AWS_SECRET_ACCESS_KEY'] = getpass.getpass("AWS Secret Access Key: ") or "your_aws_secret_key"
        config['AWS_REGION'] = input("AWS Region [ap-south-1]: ") or "ap-south-1"
        config['S3_BUCKET_NAME'] = input("S3 Bucket Name: ") or "thaparmart-prod"
        
        # Razorpay Configuration
        print("\nüí≥ RAZORPAY CONFIGURATION:")
        config['RAZORPAY_KEY_ID'] = input("Razorpay Key ID: ") or "rzp_live_your_key"
        config['RAZORPAY_KEY_SECRET'] = getpass.getpass("Razorpay Key Secret: ") or "your_razorpay_secret"
        
        return config
        
    def create_production_env_file(self, config):
        print("\nüìù Creating production environment file...")
        
        env_content = f"""# Production Environment Variables
# Generated by deploy_production.py

# Database Configuration
MONGO_PASSWORD={config['MONGO_PASSWORD']}

# Domain Configuration
FRONTEND_URL={config['FRONTEND_URL']}
BACKEND_URL={config['BACKEND_URL']}

# AWS S3 Configuration
AWS_ACCESS_KEY_ID={config['AWS_ACCESS_KEY_ID']}
AWS_SECRET_ACCESS_KEY={config['AWS_SECRET_ACCESS_KEY']}
AWS_REGION={config['AWS_REGION']}
S3_BUCKET_NAME={config['S3_BUCKET_NAME']}

# Razorpay Configuration
RAZORPAY_KEY_ID={config['RAZORPAY_KEY_ID']}
RAZORPAY_KEY_SECRET={config['RAZORPAY_KEY_SECRET']}

# Security
JWT_SECRET=thapar_jwt_secret_prod_2024_secure_key
CORS_ORIGINS={config['FRONTEND_URL']}
"""
        
        with open(self.env_file, 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Created {self.env_file}")
        
    def create_production_env_files(self, config):
        print("\nüìù Setting up production environment files...")
        
        # Backend .env file
        backend_env = self.project_root / "backend" / ".env.prod"
        backend_env_content = f"""# Production Backend Environment
MONGO_URL=mongodb://admin:{config['MONGO_PASSWORD']}@mongodb:27017/thaparMARTN?authSource=admin
DB_NAME=thaparMARTN
CORS_ORIGINS={config['FRONTEND_URL']}

# AWS S3 Configuration
AWS_ACCESS_KEY_ID={config['AWS_ACCESS_KEY_ID']}
AWS_SECRET_ACCESS_KEY={config['AWS_SECRET_ACCESS_KEY']}
AWS_REGION={config['AWS_REGION']}
S3_BUCKET_NAME={config['S3_BUCKET_NAME']}

# Razorpay Configuration
RAZORPAY_KEY_ID={config['RAZORPAY_KEY_ID']}
RAZORPAY_KEY_SECRET={config['RAZORPAY_KEY_SECRET']}
"""
        
        with open(backend_env, 'w') as f:
            f.write(backend_env_content)
        print(f"‚úÖ Created {backend_env}")
        
        # Frontend .env file
        frontend_env = self.project_root / "frontend" / ".env.prod"
        frontend_env_content = f"""# Production Frontend Environment
REACT_APP_BACKEND_URL={config['BACKEND_URL']}
"""
        
        with open(frontend_env, 'w') as f:
            f.write(frontend_env_content)
        print(f"‚úÖ Created {frontend_env}")
        
    def create_docker_compose_production(self, config):
        print("\nüê≥ Creating production Docker Compose configuration...")
        
        compose_content = f"""version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:latest
    container_name: thapar-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: {config['MONGO_PASSWORD']}
      MONGO_INITDB_DATABASE: thaparMARTN
    volumes:
      - mongodb_data_prod:/data/db
      - ./backup:/backup
    networks:
      - thapar-network-prod
    # Only expose to internal network in production
    # ports:
    #   - "27017:27017"

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: thapar-backend-prod
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - MONGO_URL=mongodb://admin:{config['MONGO_PASSWORD']}@mongodb:27017/thaparMARTN?authSource=admin
      - DB_NAME=thaparMARTN
      - CORS_ORIGINS={config['FRONTEND_URL']}
      - AWS_ACCESS_KEY_ID={config['AWS_ACCESS_KEY_ID']}
      - AWS_SECRET_ACCESS_KEY={config['AWS_SECRET_ACCESS_KEY']}
      - AWS_REGION={config['AWS_REGION']}
      - S3_BUCKET_NAME={config['S3_BUCKET_NAME']}
      - RAZORPAY_KEY_ID={config['RAZORPAY_KEY_ID']}
      - RAZORPAY_KEY_SECRET={config['RAZORPAY_KEY_SECRET']}
    depends_on:
      - mongodb
    networks:
      - thapar-network-prod
    # Production mode - no volume mounting and no reload
    command: uvicorn server:app --host 0.0.0.0 --port 8001

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_BACKEND_URL={config['BACKEND_URL']}
    container_name: thapar-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - thapar-network-prod

volumes:
  mongodb_data_prod:

networks:
  thapar-network-prod:
    driver: bridge
"""
        
        with open(self.compose_file, 'w') as f:
            f.write(compose_content)
        print(f"‚úÖ Created {self.compose_file}")
        
    def create_backup_script(self):
        print("\nüíæ Creating backup script...")
        
        backup_script = self.project_root / "backup_production.py"
        backup_content = """#!/usr/bin/env python3
import subprocess
import datetime

def backup_database():
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_name = f"thapar_backup_{timestamp}"
    
    print(f"Creating backup: {backup_name}")
    
    # Create backup
    subprocess.run([
        'docker', 'exec', 'thapar-mongodb-prod', 
        'mongodump', '--out', f'/backup/{backup_name}'
    ])
    
    # Copy to host
    subprocess.run([
        'docker', 'cp', 
        f'thapar-mongodb-prod:/backup/{backup_name}', 
        f'./backup/{backup_name}'
    ])
    
    print(f"Backup created: ./backup/{backup_name}")

if __name__ == "__main__":
    backup_database()
"""
        
        with open(backup_script, 'w') as f:
            f.write(backup_content)
        os.chmod(backup_script, 0o755)
        print(f"‚úÖ Created {backup_script}")
        
    def stop_existing_containers(self):
        print("\nüõë Stopping any existing production containers...")
        try:
            subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'down', '--remove-orphans'], 
                         cwd=self.project_root, check=False)
            print("‚úÖ Stopped existing containers")
        except Exception as e:
            print(f"‚ö†Ô∏è  Warning: {e}")
            
    def build_and_start_services(self):
        print("\nüî® Building and starting production services...")
        print("This may take several minutes...")
        
        try:
            # Build and start services
            result = subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'up', '--build', '-d'], 
                                  cwd=self.project_root, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Production services started successfully!")
            else:
                print(f"‚ùå Failed to start services:")
                print(result.stderr)
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå Error starting services: {e}")
            sys.exit(1)
            
    def wait_for_services(self):
        print("\n‚è≥ Waiting for production services to be ready...")
        
        for i in range(60):  # More time for production startup
            try:
                result = subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'ps'], 
                                      cwd=self.project_root, capture_output=True, text=True)
                
                if "Up" in result.stdout:
                    time.sleep(5)  # Wait more for full startup
                    print("‚úÖ Production services are ready!")
                    return True
                    
                time.sleep(3)
                print(f"   Waiting... ({i+1}/60)")
                
            except Exception:
                time.sleep(3)
                
        print("‚ö†Ô∏è  Services may still be starting up...")
        return False
        
    def show_service_status(self):
        print("\nüìä Production Service Status:")
        try:
            result = subprocess.run(['docker-compose', '-f', 'docker-compose.prod.yml', 'ps'], 
                                  cwd=self.project_root, capture_output=True, text=True)
            print(result.stdout)
        except Exception as e:
            print(f"Error getting status: {e}")
            
    def show_access_info(self, config):
        print("\nüåê Your Thapar Marketplace is now running in PRODUCTION!")
        print("=" * 60)
        print(f"üì± Frontend:      {config['FRONTEND_URL']}")
        print(f"üîß Backend API:   {config['BACKEND_URL']}")
        print("üóÑÔ∏è  Database:     Internal (not exposed)")
        print("=" * 60)
        
        print("\nüìã Production Commands:")
        print("   View logs:       docker-compose -f docker-compose.prod.yml logs -f")
        print("   Stop services:   docker-compose -f docker-compose.prod.yml down")
        print("   Restart:         python deploy_production.py")
        print("   Backup DB:       python backup_production.py")
        print("   Monitor:         docker stats")
        
        print("\nüîí Security Reminders:")
        print("   ‚Ä¢ Set up SSL certificates for HTTPS")
        print("   ‚Ä¢ Configure firewall rules")
        print("   ‚Ä¢ Regular backups")
        print("   ‚Ä¢ Monitor logs for security issues")
        
    def run_deployment(self):
        try:
            self.print_banner()
            self.check_prerequisites()
            
            # Get production configuration
            config = self.collect_production_config()
            
            self.create_production_env_file(config)
            self.create_production_env_files(config)
            self.create_docker_compose_production(config)
            self.create_backup_script()
            self.stop_existing_containers()
            self.build_and_start_services()
            self.wait_for_services()
            self.show_service_status()
            self.show_access_info(config)
            
            print("\nüéâ Production deployment completed successfully!")
            print("\n‚ö†Ô∏è  Important: Configure your domain DNS to point to this server!")
            
        except KeyboardInterrupt:
            print("\n\n‚ùå Deployment cancelled by user")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå Production deployment failed: {e}")
            sys.exit(1)

if __name__ == "__main__":
    deployment = ProductionDeployment()
    deployment.run_deployment()